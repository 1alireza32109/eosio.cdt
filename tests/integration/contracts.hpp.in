#pragma once

namespace eosio { namespace testing {

struct contracts {
   static const char* malloc_tests_wasm() { return "${CMAKE_BINARY_DIR}/../unit/test_contracts/malloc_tests.wasm"; }
   static const char* old_malloc_tests_wasm() { return "${CMAKE_BINARY_DIR}/../unit/test_contracts/old_malloc_tests.wasm"; }

   static const char* simple_wasm() { return "${CMAKE_BINARY_DIR}/../unit/test_contracts/simple_tests.wasm"; }

   static const char* transfer_wasm() { return "${CMAKE_BINARY_DIR}/../unit/test_contracts/transfer_contract.wasm"; }

   static const char* capi_tests_wasm() { return "${CMAKE_BINARY_DIR}/../unit/test_contracts/capi_tests.wasm"; }

   static std::vector<uint8_t> kv_single_tests_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../unit/test_contracts/kv_single_index_tests.wasm"); }
   static std::vector<char>    kv_single_tests_abi() { return read_abi("${CMAKE_BINARY_DIR}/../unit/test_contracts/kv_single_index_tests.abi"); }

   static std::vector<uint8_t> kv_multi_tests_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../unit/test_contracts/kv_multiple_indices_tests.wasm"); }
   static std::vector<char>    kv_multi_tests_abi() { return read_abi("${CMAKE_BINARY_DIR}/../unit/test_contracts/kv_multiple_indices_tests.abi"); }

   static std::vector<uint8_t> kv_make_key_tests_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../unit/test_contracts/kv_make_key_tests.wasm"); }
   static std::vector<char>    kv_make_key_tests_abi() { return read_abi("${CMAKE_BINARY_DIR}/../unit/test_contracts/kv_make_key_tests.abi"); }

   static std::vector<uint8_t> action_results_test_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../unit/test_contracts/action_results_test.wasm"); }
   static std::vector<char>    action_results_test_abi() { return read_abi("${CMAKE_BINARY_DIR}/../unit/test_contracts/action_results_test.abi"); }
};
 
}} //ns eosio::testing
